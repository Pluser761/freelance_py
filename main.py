import logging
import config
import aiohttp_socks
from aiogram import Bot, Dispatcher, executor, types

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.contrib.fsm_storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)


bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

main_dict = {
    'cus': {
        'text': '–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞',
        'b_text': '–Ø –∑–∞–∫–∞–∑—á–∏–∫',
        'cr_ord': {
            'text': '–û–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö',
            'b_text': u'\U0001F4DD –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ'
        },
        'my_ord': {
            'text': '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π',
            'b_text': u'\U0001F4D6 –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è'
        },
        'bal': {
            'text': '–ú–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞',
            'b_text': u'\U0001F4B0 –ë–∞–ª–∞–Ω—Å:'
        },
        'set': {
            'text': '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            'b_text': u'\U00002699 –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            'to_wor': {
                'text': '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
                'b_text': '–Ø —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä'
            }
        }
    },
    'wor': {
        'text': '–ú–µ–Ω—é —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞',
        'b_text': '–Ø —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä',
        'my_ord': {
            'text': '–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è',
            'b_text': u'\U0001F5D2 –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è'
        },
        'geo_find': {
            'text': '–ì–µ–æ–ø–æ–∏—Å–∫',
            'b_text': u'\U0001F30D –ì–µ–æ–ø–æ–∏—Å–∫'
        },
        'cats': {
            'text': '–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            'b_text': u'\U0001F5C3 –ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        },
        'set': {
            'text': '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            'b_text': u'\U0001F6E0 –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            'to_cus': {
                'text': '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
                'b_text': '–Ø –∑–∞–∫–∞–∑—á–∏–∫'
            }
        },
    },
    'bal': {
        'text': '–ú–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞',
        'b_text': u'\U0001F4B0 –ë–∞–ª–∞–Ω—Å:'
    },
    'about': {
        'b_text': u'\U0001F4CD –û —Å–µ—Ä–≤–∏—Å–µ',
        'text': '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ —Å–µ—Ä–≤–∏—Å–µ',
        'back': {
            'b_text': '–ù–∞–∑–∞–¥'
        }
    }
}


class Ticket(StatesGroup):
    wf_body = State()
    wf_price = State()


def cus_menu():
    cus_dict = main_dict['cus']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row_width = 1
    markup.add(types.KeyboardButton(cus_dict['cr_ord']['b_text']))
    markup.row_width = 2
    markup.add(types.KeyboardButton(cus_dict['my_ord']['b_text']),
               types.KeyboardButton(main_dict['bal']['b_text']))
    markup.add(types.KeyboardButton(main_dict['about']['b_text']),
               types.KeyboardButton(cus_dict['set']['b_text']))
    return markup


def cus_set_menu():
    cur_dict = main_dict['cus']['set']
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton('To worker', callback_data='wor')]
        ]
    )


def wor_menu():
    wor_dict = main_dict['wor']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row_width = 2
    markup.add(types.KeyboardButton(wor_dict['my_ord']['b_text']),
               types.KeyboardButton(wor_dict['cats']['b_text']))
    markup.add(types.KeyboardButton(wor_dict['geo_find']['b_text']),
               types.KeyboardButton(main_dict['bal']['b_text']))
    markup.add(types.KeyboardButton(main_dict['about']['b_text']),
               types.KeyboardButton(wor_dict['set']['b_text']))
    return markup


def wor_set_menu():
    cur_dict = main_dict['wor']['set']
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton('To customer', callback_data='cus')]
        ]
    )


@dp.message_handler(commands=['start'])
async def starter(msg: types.Message):
    await bot.send_message(chat_id=msg.from_user.id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=cus_menu())


async def ticket_1(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=types.ReplyKeyboardRemove())
    await Ticket.wf_body.set()


@dp.message_handler(state=Ticket.wf_body, content_types=types.ContentTypes.TEXT)
async def ticket_2(msg: types.Message, state: FSMContext):
    await state.update_data(body=msg.text.lower())
    await Ticket.next()
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ")


@dp.message_handler(state=Ticket.wf_price, content_types=types.ContentTypes.TEXT)
async def ticket_3(msg: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await msg.answer(f"–ó–∞–¥–∞–Ω–∏–µ: {user_data['body']}.\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {msg.text} —Ä—É–±–ª–µ–π.")
    await state.finish()


@dp.message_handler()
async def worker(msg: types.Message):
    if msg.text[0] == 'üìù':
        await ticket_1(msg)
    elif msg.text[0] == 'üìñ':
        await msg.answer('üìñ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è')  # cus
        return
    elif msg.text[0] == '‚öô':
        await msg.answer('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=cus_set_menu())
        return
    elif msg.text[0] == 'üóí':
        await msg.answer('üóí –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è')  # wor
        return
    elif msg.text[0] == 'üóÉ':
        await msg.answer('üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
        return
    elif msg.text[0] == 'üåç':
        await msg.answer('üåç –ì–µ–æ–ø–æ–∏—Å–∫')
        return
    elif msg.text[0] == 'üõ†':
        await msg.answer('üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=wor_set_menu())
        return
    elif msg.text[0] == 'üìç':
        await msg.answer('üìç –û —Å–µ—Ä–≤–∏—Å–µ')  # common
        return
    elif msg.text[0] == 'üí∞':
        await msg.answer('üí∞ –ë–∞–ª–∞–Ω—Å')
        return


@dp.callback_query_handler(lambda call: True)
async def main_handler(call: types.CallbackQuery):
    print(call)
    data = call.data
    user_id = call.from_user.id

    if data in ['cr_ord']:
        return

    if data == 'cus':
        await bot.send_message(chat_id=user_id, text='Customer', reply_markup=cus_menu())
    elif data == 'wor':
        await bot.send_message(chat_id=user_id, text='Worker', reply_markup=wor_menu())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
